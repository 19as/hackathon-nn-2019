#pragma once

#include <string>

//------------------------------------------------------------------------------------------------
/*! Структура для описания одного района карты
*   Хранится такие характеристики, как:
*   - количество проживающих людей
*   - объекты инфраструктуры с их приоритетами
*/
struct hexagon
{
    //! Конструктор
    hexagon(): population (0) {}

    //! Внутренний индекс шестиугольника
    std::string index;

    //! Примерное общее количество постоянно проживающих людей
    size_t population;

    /*! Какие типы объектов инфраструктуры есть в данной области
    *   Чем больше число для  конкретного типа, тем ценнее для жителя объект
    *   (пользуется большим спросом). Если 0, то такого типа просто нет
    */
    struct infrastructure
    {
        //! Конструктор
        infrastructure() : home(0), moll (0), education (0), office(0), plant(0), sport(0), hospital (0), entertaiment (0), stations (0), attractions(0) {}

        //! Жилые дома
        size_t home;

        //! Торговые центры
        size_t moll;

        //! Объекты образования (школы, ВУЗЫ)
        size_t education;

        //! Коммерческие офисы
        size_t office;

        //! Заводы, предприятия
        size_t plant;

        //! Спортивные объекты, фитнесс центры
        size_t sport;

        //! Больницы, лечебные учреждения
        size_t hospital;

        //! Развлечение (кинотеатры, театры)
        size_t entertaiment;

        //! Железнодорожные вокзалы, автостанции, аэропорты
        size_t stations;

        //! Достопримечательности
        size_t attractions;
    } infra;
};

//------------------------------------------------------------------------------------------------
//! Стохастические данные в определенные моменты времени
struct timePick
{
    //! точки времени
    double t1;
    double t2;
    double t3;

    //! значения (доля) соответствующие времени (число из [0:100] )
    double y1;
    double y2;
    double y3;
    timePick() {}
    timePick ( double _y1, double _y2, double _y3, double _t1, double _t2, double _t3 )
    {
        // время используется в минутах
        t1 = _t1 * 60;
        t2 = _t2 * 60;
        t3 = _t3 * 60;

        y1 = _y1;
        y2 = _y2;
        y3 = _y3;
    }
};

//------------------------------------------------------------------------------------------------
//! Параметры параболы
struct paramParab
{
    double a;
    double b;
    double c;

    paramParab(timePick _tP)
    {
        a = (_tP.y3 - (_tP.t3 * (_tP.y2 - _tP.y1) + _tP.t2 * _tP.y1 - _tP.t1 * _tP.y2) / (_tP.t2 - _tP.t1)) /(_tP.t3 * (_tP.t3 - _tP.t1 - _tP.t2) + _tP.t1 * _tP.t2);
        b = (_tP.y2 - _tP.y1) / (_tP.t2 - _tP.t1) - a * (_tP.t1 + _tP.t2);
        c = (_tP.t2 * _tP.y1 - _tP.t1 * _tP.y2) / (_tP.t2 - _tP.t1) + a * _tP.t1 * _tP.t2;
    }
};
